// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: /Users/alex/Desktop/School/eclipse-workspace/Duplicate-Code-Detector-Team-W7-2/lib/src/main/jflex/jflexScanner.jflex

/* Partially derived from JFlexDemo by Steven Zeil https://git.cs.odu.edu/zeil/jflexdemo/-/blob/master/src/main/jflex/demo.jflex
* closely modeled after "lexical.flex" by  Jeanderson Barros Candido and Thiago Ferreira Patricio https://github.com/jeandersonbc/compilers.cpp/blob/master/specs/lexical.flex
*/



package edu.odu.cs.cs350;
//@SuppressWarnings("unused")


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class jflexScanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u4a00\1\u4b00\1\u1f00\1\u4c00\1\u1f00\1\u4d00\1\u4e00"+
    "\1\u4f00\1\u1f00\3\u0100\1\u5000\1\u5100\1\u5200\12\u1f00\4\u0100"+
    "\1\u5300\17\u1f00\2\u0100\1\u5400\41\u1f00\2\u0100\1\u5500\1\u5600"+
    "\2\u1f00\1\u5700\1\u5800\27\u0100\1\u5900\2\u0100\1\u5a00\45\u1f00"+
    "\1\u0100\1\u5b00\1\u5c00\11\u1f00\1\u5d00\24\u1f00\1\u5e00\1\u5f00"+
    "\1\u1f00\1\u6000\1\u6100\1\u6200\1\u6300\2\u1f00\1\u6400\5\u1f00"+
    "\1\u6500\7\u1f00\1\u6600\1\u6700\2\u1f00\1\u6800\1\u1f00\1\u6900"+
    "\21\u1f00\246\u0100\1\u6a00\20\u0100\1\u6b00\1\u6c00\25\u0100\1\u6d00"+
    "\34\u0100\1\u6e00\14\u1f00\2\u0100\1\u6f00\u0b05\u1f00\1\u7000\1\u7100"+
    "\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\6"+
    "\2\11\1\15\1\16\1\11\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\2\22\1\26\1\22\1\27\1\22"+
    "\1\30\1\11\1\31\1\32\1\33\1\11\1\6\3\12"+
    "\1\34\1\35\5\12\1\36\3\12\1\37\2\12\1\40"+
    "\4\12\1\41\1\12\1\42\1\12\1\11\1\43\1\11"+
    "\1\44\1\45\1\6\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\12\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\11\1\77\1\11"+
    "\1\100\6\0\1\101\32\0\2\6\4\12\4\6\1\12"+
    "\2\6\1\0\7\6\1\12\4\6\1\12\5\6\27\12"+
    "\1\6\37\12\1\6\u01ca\12\4\6\14\12\16\6\5\12"+
    "\7\6\1\12\1\6\1\12\21\6\160\0\5\12\1\6"+
    "\2\12\2\6\4\12\1\6\1\12\6\6\1\12\1\6"+
    "\3\12\1\6\1\12\1\6\24\12\1\6\123\12\1\6"+
    "\213\12\1\6\5\0\2\6\246\12\1\6\46\12\2\6"+
    "\1\12\6\6\51\12\6\6\1\12\1\6\55\0\1\6"+
    "\1\0\1\6\2\0\1\6\2\0\1\6\1\0\10\6"+
    "\33\12\4\6\4\12\15\6\6\0\5\6\1\12\4\6"+
    "\13\0\1\6\1\0\3\6\53\12\37\0\4\6\2\12"+
    "\1\0\143\12\1\6\1\12\10\0\1\6\6\0\2\12"+
    "\2\0\1\6\4\0\2\12\12\0\3\12\2\6\1\12"+
    "\17\6\1\0\1\12\1\0\36\12\33\0\2\6\131\12"+
    "\13\0\1\12\16\6\12\0\41\12\11\0\2\12\4\6"+
    "\1\12\2\6\1\0\30\12\4\0\1\12\11\0\1\12"+
    "\3\0\1\12\5\0\22\6\31\12\3\0\4\6\13\12"+
    "\65\6\25\12\1\6\10\12\25\6\61\0\66\12\3\0"+
    "\1\12\22\0\1\12\7\0\12\12\2\0\2\6\12\0"+
    "\1\6\20\12\3\0\1\6\10\12\2\6\2\12\2\6"+
    "\26\12\1\6\7\12\1\6\1\12\3\6\4\12\2\6"+
    "\1\0\1\12\7\0\2\6\2\0\2\6\3\0\1\12"+
    "\10\6\1\0\4\6\2\12\1\6\3\12\2\0\2\6"+
    "\12\0\4\12\7\6\2\12\1\6\1\0\2\6\3\0"+
    "\1\6\6\12\4\6\2\12\2\6\26\12\1\6\7\12"+
    "\1\6\2\12\1\6\2\12\1\6\2\12\2\6\1\0"+
    "\1\6\5\0\4\6\2\0\2\6\3\0\3\6\1\0"+
    "\7\6\4\12\1\6\1\12\7\6\14\0\3\12\1\0"+
    "\13\6\3\0\1\6\11\12\1\6\3\12\1\6\26\12"+
    "\1\6\7\12\1\6\2\12\1\6\5\12\2\6\1\0"+
    "\1\12\10\0\1\6\3\0\1\6\3\0\2\6\1\12"+
    "\17\6\2\12\2\0\2\6\12\0\1\6\1\12\7\6"+
    "\1\12\6\0\1\6\3\0\1\6\10\12\2\6\2\12"+
    "\2\6\26\12\1\6\7\12\1\6\2\12\1\6\5\12"+
    "\2\6\1\0\1\12\7\0\2\6\2\0\2\6\3\0"+
    "\10\6\2\0\4\6\2\12\1\6\3\12\2\0\2\6"+
    "\12\0\1\6\1\12\20\6\1\0\1\12\1\6\6\12"+
    "\3\6\3\12\1\6\4\12\3\6\2\12\1\6\1\12"+
    "\1\6\2\12\3\6\2\12\3\6\3\12\3\6\14\12"+
    "\4\6\5\0\3\6\3\0\1\6\4\0\2\6\1\12"+
    "\6\6\1\0\16\6\12\0\11\6\1\12\6\6\5\0"+
    "\10\12\1\6\3\12\1\6\27\12\1\6\20\12\3\6"+
    "\1\12\7\0\1\6\3\0\1\6\4\0\7\6\2\0"+
    "\1\6\3\12\5\6\2\12\2\0\2\6\12\0\20\6"+
    "\1\12\3\0\1\6\10\12\1\6\3\12\1\6\27\12"+
    "\1\6\12\12\1\6\5\12\2\6\1\0\1\12\7\0"+
    "\1\6\3\0\1\6\4\0\7\6\2\0\7\6\1\12"+
    "\1\6\2\12\2\0\2\6\12\0\1\6\2\12\15\6"+
    "\4\0\1\6\10\12\1\6\3\12\1\6\51\12\2\0"+
    "\1\12\7\0\1\6\3\0\1\6\4\0\1\12\5\6"+
    "\3\12\1\0\7\6\3\12\2\0\2\6\12\0\12\6"+
    "\6\12\2\6\2\0\1\6\22\12\3\6\30\12\1\6"+
    "\11\12\1\6\1\12\2\6\7\12\3\6\1\0\4\6"+
    "\6\0\1\6\1\0\1\6\10\0\6\6\12\0\2\6"+
    "\2\0\15\6\60\12\1\0\2\12\7\0\4\6\10\12"+
    "\10\0\1\6\12\0\47\6\2\12\1\6\1\12\2\6"+
    "\2\12\1\6\1\12\2\6\1\12\6\6\4\12\1\6"+
    "\7\12\1\6\3\12\1\6\1\12\1\6\1\12\2\6"+
    "\2\12\1\6\4\12\1\0\2\12\6\0\1\6\2\0"+
    "\1\12\2\6\5\12\1\6\1\12\1\6\6\0\2\6"+
    "\12\0\2\6\4\12\40\6\1\12\27\6\2\0\6\6"+
    "\12\0\13\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\2\0\10\12\1\6\44\12\4\6\24\0\1\6\2\0"+
    "\5\12\13\0\1\6\44\0\11\6\1\0\71\6\53\12"+
    "\24\0\1\12\12\0\6\6\6\12\4\0\4\12\3\0"+
    "\1\12\3\0\2\12\7\0\3\12\4\0\15\12\14\0"+
    "\1\12\17\0\2\6\46\12\1\6\1\12\5\6\1\12"+
    "\2\6\53\12\1\6\115\12\1\6\4\12\2\6\7\12"+
    "\1\6\1\12\1\6\4\12\2\6\51\12\1\6\4\12"+
    "\2\6\41\12\1\6\4\12\2\6\7\12\1\6\1\12"+
    "\1\6\4\12\2\6\17\12\1\6\71\12\1\6\4\12"+
    "\2\6\103\12\2\6\3\0\40\6\20\12\20\6\126\12"+
    "\2\6\6\12\3\6\u016c\12\2\6\21\12\1\6\32\12"+
    "\5\6\113\12\3\6\13\12\7\6\15\12\1\6\4\12"+
    "\3\0\13\6\22\12\3\0\13\6\22\12\2\0\14\6"+
    "\15\12\1\6\3\12\1\6\2\0\14\6\64\12\40\0"+
    "\3\6\1\12\3\6\2\12\1\0\2\6\12\0\41\6"+
    "\4\0\1\6\12\0\6\6\131\12\7\6\5\12\2\0"+
    "\42\12\1\0\1\12\5\6\106\12\12\6\37\12\1\6"+
    "\14\0\4\6\14\0\12\6\12\0\36\12\2\6\5\12"+
    "\13\6\54\12\4\6\32\12\6\6\12\0\46\6\27\12"+
    "\5\0\4\6\65\12\12\0\1\6\35\0\2\6\13\0"+
    "\6\6\12\0\15\6\1\12\10\6\16\0\102\6\5\0"+
    "\57\12\21\0\7\12\4\6\12\0\21\6\11\0\14\6"+
    "\3\0\36\12\15\0\2\12\12\0\54\12\16\0\14\6"+
    "\44\12\24\0\10\6\12\0\3\6\3\12\12\0\44\12"+
    "\2\6\11\12\7\6\53\12\2\6\3\12\20\6\3\0"+
    "\1\6\25\0\4\12\1\0\4\12\3\0\2\12\3\0"+
    "\6\6\300\12\72\0\1\6\5\0\26\12\2\6\6\12"+
    "\2\6\46\12\2\6\6\12\2\6\10\12\1\6\1\12"+
    "\1\6\1\12\1\6\1\12\1\6\37\12\2\6\65\12"+
    "\1\6\7\12\1\6\1\12\3\6\3\12\1\6\7\12"+
    "\3\6\4\12\2\6\6\12\4\6\15\12\5\6\3\12"+
    "\1\6\7\12\16\6\5\0\30\6\2\3\5\0\20\6"+
    "\2\12\23\6\1\12\13\6\5\0\1\6\12\0\1\6"+
    "\1\12\15\6\1\12\20\6\15\12\3\6\40\12\20\6"+
    "\15\0\4\6\1\0\3\6\14\0\21\6\1\12\4\6"+
    "\1\12\2\6\12\12\1\6\1\12\3\6\5\12\6\6"+
    "\1\12\1\6\1\12\1\6\1\12\1\6\4\12\1\6"+
    "\13\12\2\6\4\12\5\6\5\12\4\6\1\12\21\6"+
    "\51\12\u0177\6\57\12\1\6\57\12\1\6\205\12\6\6"+
    "\4\12\3\0\2\12\14\6\46\12\1\6\1\12\5\6"+
    "\1\12\2\6\70\12\7\6\1\12\17\6\1\0\27\12"+
    "\11\6\7\12\1\6\7\12\1\6\7\12\1\6\7\12"+
    "\1\6\7\12\1\6\7\12\1\6\7\12\1\6\7\12"+
    "\1\6\40\0\57\6\1\12\325\6\3\12\31\6\11\12"+
    "\6\0\1\6\5\12\2\6\5\12\4\6\126\12\2\6"+
    "\2\0\2\6\3\12\1\6\132\12\1\6\4\12\5\6"+
    "\53\12\1\6\136\12\21\6\33\12\65\6\306\12\112\6"+
    "\360\12\20\6\215\12\103\6\56\12\2\6\15\12\3\6"+
    "\20\12\12\0\2\12\24\6\57\12\1\0\4\6\12\0"+
    "\1\6\37\12\2\0\120\12\2\0\45\6\11\12\2\6"+
    "\147\12\2\6\57\12\75\6\13\12\1\0\3\12\1\0"+
    "\4\12\1\0\27\12\5\0\20\6\1\12\7\6\64\12"+
    "\14\6\2\0\62\12\22\0\12\6\12\0\6\6\22\0"+
    "\6\12\3\6\1\12\1\6\2\12\13\0\34\12\10\0"+
    "\2\6\27\12\15\0\14\6\35\12\3\6\4\0\57\12"+
    "\16\0\16\6\1\12\12\0\6\6\5\12\1\0\12\12"+
    "\12\0\5\12\1\6\51\12\16\0\11\6\3\12\1\0"+
    "\10\12\2\0\2\6\12\0\6\6\27\12\3\6\1\12"+
    "\3\0\62\12\1\0\1\12\3\0\2\12\2\0\5\12"+
    "\2\0\1\12\1\0\1\12\30\6\3\12\2\6\13\12"+
    "\5\0\2\6\3\12\2\0\12\6\6\12\2\6\6\12"+
    "\2\6\6\12\11\6\7\12\1\6\7\12\1\6\53\12"+
    "\1\6\12\12\12\6\163\12\10\0\1\6\2\0\2\6"+
    "\12\0\6\6\244\12\14\6\27\12\4\6\61\12\4\6"+
    "\u0100\3\156\12\2\6\152\12\46\6\7\12\14\6\5\12"+
    "\5\6\1\12\1\0\12\12\1\6\15\12\1\6\5\12"+
    "\1\6\1\12\1\6\2\12\1\6\2\12\1\6\154\12"+
    "\41\6\153\12\22\6\100\12\2\6\66\12\50\6\15\12"+
    "\3\6\20\0\20\6\20\0\3\6\2\12\30\6\3\12"+
    "\31\6\1\12\6\6\5\12\1\6\207\12\2\6\1\0"+
    "\4\6\1\12\13\6\12\0\7\6\32\12\4\6\1\12"+
    "\1\6\32\12\13\6\131\12\3\6\6\12\2\6\6\12"+
    "\2\6\6\12\2\6\3\12\3\6\2\12\3\6\2\12"+
    "\22\6\3\0\4\6\14\12\1\6\32\12\1\6\23\12"+
    "\1\6\2\12\1\6\17\12\2\6\16\12\42\6\173\12"+
    "\105\6\65\12\210\6\1\0\202\6\35\12\3\6\61\12"+
    "\17\6\1\0\37\6\40\12\15\6\36\12\5\6\46\12"+
    "\5\0\5\6\36\12\2\6\44\12\4\6\10\12\1\6"+
    "\5\12\52\6\236\12\2\6\12\0\6\6\44\12\4\6"+
    "\44\12\4\6\50\12\10\6\64\12\234\6\67\12\11\6"+
    "\26\12\12\6\10\12\230\6\6\12\2\6\1\12\1\6"+
    "\54\12\1\6\2\12\3\6\1\12\2\6\27\12\12\6"+
    "\27\12\11\6\37\12\101\6\23\12\1\6\2\12\12\6"+
    "\26\12\12\6\32\12\106\6\70\12\6\6\2\12\100\6"+
    "\1\12\3\0\1\6\2\0\5\6\4\0\4\12\1\6"+
    "\3\12\1\6\35\12\2\6\3\0\4\6\1\0\40\6"+
    "\35\12\3\6\35\12\43\6\10\12\1\6\34\12\2\0"+
    "\31\6\66\12\12\6\26\12\12\6\23\12\15\6\22\12"+
    "\156\6\111\12\67\6\63\12\15\6\63\12\15\6\44\12"+
    "\4\0\10\6\12\0\306\6\35\12\12\6\1\12\10\6"+
    "\26\12\13\0\257\6\3\0\65\12\17\0\37\6\12\0"+
    "\17\6\4\0\55\12\13\0\2\6\1\0\17\6\1\0"+
    "\2\6\31\12\7\6\12\0\6\6\3\0\44\12\16\0"+
    "\1\6\12\0\4\6\1\12\2\0\11\6\43\12\1\0"+
    "\2\6\1\12\11\6\3\0\60\12\16\0\4\12\4\6"+
    "\4\0\3\6\12\0\1\12\1\6\1\12\43\6\22\12"+
    "\1\6\31\12\14\0\6\6\1\0\101\6\7\12\1\6"+
    "\1\12\1\6\4\12\1\6\17\12\1\6\12\12\7\6"+
    "\57\12\14\0\5\6\12\0\6\6\4\0\1\6\10\12"+
    "\2\6\2\12\2\6\26\12\1\6\7\12\1\6\2\12"+
    "\1\6\5\12\1\6\2\0\1\12\7\0\2\6\2\0"+
    "\2\6\3\0\2\6\1\12\6\6\1\0\5\6\5\12"+
    "\2\0\2\6\7\0\3\6\5\0\213\6\65\12\22\0"+
    "\4\12\5\6\12\0\4\6\1\0\41\6\60\12\24\0"+
    "\2\12\1\6\1\12\10\6\12\0\246\6\57\12\7\0"+
    "\2\6\11\0\27\6\4\12\2\0\42\6\60\12\21\0"+
    "\3\6\1\12\13\6\12\0\46\6\53\12\15\0\10\6"+
    "\12\0\66\6\33\12\2\6\17\0\4\6\12\0\306\6"+
    "\54\12\17\0\145\6\100\12\12\0\25\6\2\12\12\0"+
    "\50\12\7\0\1\12\4\0\10\6\1\0\10\6\1\12"+
    "\13\0\50\12\2\6\4\12\20\0\3\6\1\12\42\6"+
    "\71\12\7\6\11\12\1\6\45\12\10\0\1\6\10\0"+
    "\1\12\17\6\12\0\30\6\36\12\2\6\26\0\1\6"+
    "\16\0\111\6\7\12\1\6\2\12\1\6\46\12\6\0"+
    "\3\6\1\0\1\6\2\0\1\6\7\0\1\12\1\0"+
    "\10\6\12\0\6\6\6\12\1\6\2\12\1\6\40\12"+
    "\5\0\1\6\2\0\1\6\5\0\1\12\7\6\12\0"+
    "\u0136\6\23\12\4\0\11\6\232\12\146\6\157\12\21\6"+
    "\304\12\274\6\57\12\321\6\107\12\271\6\71\12\7\6"+
    "\37\12\1\6\12\0\146\6\36\12\2\6\5\0\13\6"+
    "\60\12\7\0\11\6\4\12\14\6\12\0\11\6\25\12"+
    "\5\6\23\12\260\6\100\12\200\6\105\12\13\6\1\12"+
    "\56\0\20\6\4\0\15\12\100\6\2\12\36\6\362\12"+
    "\16\6\363\12\15\6\37\12\121\6\u018c\12\4\6\153\12"+
    "\5\6\15\12\3\6\11\12\7\6\12\12\3\6\2\0"+
    "\1\6\4\0\301\6\5\0\3\6\26\0\2\6\7\0"+
    "\36\6\4\0\224\6\3\0\273\6\125\12\1\6\107\12"+
    "\1\6\2\12\2\6\1\12\2\6\2\12\2\6\4\12"+
    "\1\6\14\12\1\6\1\12\1\6\7\12\1\6\101\12"+
    "\1\6\4\12\2\6\10\12\1\6\7\12\1\6\34\12"+
    "\1\6\4\12\1\6\5\12\1\6\1\12\3\6\7\12"+
    "\1\6\u0154\12\2\6\31\12\1\6\31\12\1\6\37\12"+
    "\1\6\31\12\1\6\37\12\1\6\31\12\1\6\37\12"+
    "\1\6\31\12\1\6\37\12\1\6\31\12\1\6\10\12"+
    "\2\6\151\0\4\6\62\0\10\6\1\0\16\6\1\0"+
    "\26\6\5\0\1\6\17\0\120\6\7\0\1\6\21\0"+
    "\2\6\7\0\1\6\2\0\1\6\5\0\325\6\305\12"+
    "\13\6\7\0\51\6\104\12\7\0\5\6\12\0\u0156\6"+
    "\1\12\117\6\4\12\1\6\33\12\1\6\2\12\1\6"+
    "\1\12\2\6\1\12\1\6\12\12\1\6\4\12\1\6"+
    "\1\12\1\6\1\12\6\6\1\12\4\6\1\12\1\6"+
    "\1\12\1\6\1\12\1\6\3\12\1\6\2\12\1\6"+
    "\1\12\2\6\1\12\1\6\1\12\1\6\1\12\1\6"+
    "\1\12\1\6\1\12\1\6\2\12\1\6\1\12\2\6"+
    "\4\12\1\6\7\12\1\6\4\12\1\6\4\12\1\6"+
    "\1\12\1\6\12\12\1\6\21\12\5\6\3\12\1\6"+
    "\5\12\1\6\21\12\104\6\327\12\51\6\65\12\13\6"+
    "\336\12\2\6\u0182\12\16\6\u0131\12\37\6\36\12\343\6"+
    "\1\0\36\6\140\0\200\6\360\0\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29184];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\1\1\4\1\5\1\6"+
    "\2\7\2\6\1\4\1\6\1\10\1\4\1\11\1\12"+
    "\1\11\1\5\1\11\24\5\1\11\1\3\1\11\1\0"+
    "\1\13\1\0\1\12\1\14\1\0\1\2\1\0\1\15"+
    "\16\5\1\16\11\5\1\16\10\5\1\11\23\5\2\0"+
    "\36\5\1\3\36\5\1\0\6\5\1\16\44\5\1\17"+
    "\14\5\1\20\4\5\1\21\6\5\1\22\4\5\1\11"+
    "\34\5\1\23\11\5\1\3\1\16\27\5\1\21\14\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[321];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\102\0\204\0\306\0\u0108\0\102\0\u014a"+
    "\0\u018c\0\u01ce\0\u018c\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318"+
    "\0\u035a\0\u039c\0\306\0\u03de\0\u0420\0\u018c\0\u0462\0\u04a4"+
    "\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee\0\u0630\0\u0672\0\u06b4"+
    "\0\u06f6\0\u0738\0\u077a\0\u07bc\0\u07fe\0\u0840\0\u0882\0\u08c4"+
    "\0\u0906\0\u0948\0\u098a\0\102\0\102\0\u0108\0\102\0\u09cc"+
    "\0\102\0\102\0\u0a0e\0\u0a50\0\u0318\0\u018c\0\u0a92\0\u0ad4"+
    "\0\u0b16\0\u0b58\0\u0b9a\0\u0bdc\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4"+
    "\0\u0d26\0\u0d68\0\u0daa\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4"+
    "\0\u0f36\0\u0f78\0\u0fba\0\u0ffc\0\u103e\0\u1080\0\u014a\0\u10c2"+
    "\0\u1104\0\u1146\0\u1188\0\u11ca\0\u120c\0\u124e\0\u1290\0\u12d2"+
    "\0\u1314\0\u1356\0\u1398\0\u13da\0\u141c\0\u145e\0\u14a0\0\u14e2"+
    "\0\u1524\0\u1566\0\u15a8\0\u15ea\0\u162c\0\u166e\0\u16b0\0\u16f2"+
    "\0\u1734\0\u1776\0\u17b8\0\u17fa\0\u183c\0\u187e\0\u18c0\0\u1902"+
    "\0\u1944\0\u1986\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0\0\u1b12"+
    "\0\u1b54\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22"+
    "\0\u1d64\0\u1da6\0\u1de8\0\u1e2a\0\u1e6c\0\u1eae\0\u1ef0\0\u1f32"+
    "\0\u1f74\0\u1fb6\0\u1ff8\0\u12d2\0\u203a\0\u207c\0\u20be\0\u2100"+
    "\0\u2142\0\u2184\0\u21c6\0\u2208\0\u224a\0\u228c\0\u22ce\0\u2310"+
    "\0\u2352\0\u2394\0\u23d6\0\u2418\0\u245a\0\u249c\0\u24de\0\u2520"+
    "\0\u2562\0\u25a4\0\u25e6\0\u2628\0\u266a\0\u26ac\0\u26ee\0\u2730"+
    "\0\u2772\0\u27b4\0\u27f6\0\u2838\0\u287a\0\u28bc\0\u28fe\0\u2940"+
    "\0\u2982\0\u29c4\0\u2a06\0\u2a48\0\u2a8a\0\u2acc\0\u2b0e\0\u2b50"+
    "\0\u2b92\0\u2bd4\0\u2c16\0\u2c58\0\u2c9a\0\u2cdc\0\u2d1e\0\u2d60"+
    "\0\u2da2\0\u2de4\0\u2e26\0\u2e68\0\u2eaa\0\u2eec\0\u2f2e\0\u2f70"+
    "\0\u2fb2\0\u2ff4\0\u3036\0\u3078\0\u30ba\0\u30fc\0\u313e\0\u3180"+
    "\0\u31c2\0\u3204\0\u3246\0\u3288\0\u32ca\0\u330c\0\u014a\0\u334e"+
    "\0\u3390\0\u33d2\0\u3414\0\u3456\0\u3498\0\u34da\0\u351c\0\u355e"+
    "\0\u35a0\0\u35e2\0\u3624\0\u014a\0\u3666\0\u36a8\0\u36ea\0\u372c"+
    "\0\u376e\0\u37b0\0\u37f2\0\u3834\0\u3876\0\u38b8\0\u38fa\0\u014a"+
    "\0\u393c\0\u397e\0\u39c0\0\u3a02\0\u014a\0\u3a44\0\u3a86\0\u3ac8"+
    "\0\u3b0a\0\u3b4c\0\u3b8e\0\u3bd0\0\u3c12\0\u3c54\0\u3c96\0\u3cd8"+
    "\0\u3d1a\0\u3d5c\0\u3d9e\0\u3de0\0\u3e22\0\u3e64\0\u3ea6\0\u3ee8"+
    "\0\u3f2a\0\u3f6c\0\u3fae\0\u3ff0\0\u4032\0\u4074\0\u40b6\0\u40f8"+
    "\0\u413a\0\u014a\0\u417c\0\u41be\0\u4200\0\u4242\0\u4284\0\u42c6"+
    "\0\u4308\0\u434a\0\u438c\0\u014a\0\u43ce\0\u4410\0\u4452\0\u4494"+
    "\0\u44d6\0\u4518\0\u455a\0\u459c\0\u45de\0\u4620\0\u4662\0\u46a4"+
    "\0\u46e6\0\u4728\0\u476a\0\u47ac\0\u47ee\0\u4830\0\u4872\0\u48b4"+
    "\0\u48f6\0\u4938\0\u497a\0\u49bc\0\u014a\0\u49fe\0\u4a40\0\u4a82"+
    "\0\u4ac4\0\u4b06\0\u4b48\0\u4b8a\0\u4bcc\0\u4c0e\0\u4c50\0\u4c92"+
    "\0\u4cd4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[321];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\3\1\4\1\2\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\6\20\1\21\1\22\1\23\1\24\2\10\1\25"+
    "\4\10\1\2\1\26\1\10\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\10\1\36\1\10\1\37\1\40"+
    "\1\41\1\42\1\43\1\10\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\2\10\1\53\1\54\1\2\104\0"+
    "\1\3\131\0\1\55\47\0\10\56\1\57\32\56\1\60"+
    "\36\56\1\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\32\10\2\0\1\10\32\0\1\61\63\0\1\55"+
    "\15\0\1\61\65\0\1\54\13\0\1\61\66\0\1\54"+
    "\12\0\1\61\1\16\63\0\1\62\101\0\1\63\3\0"+
    "\1\64\10\0\1\61\71\0\6\20\15\0\1\65\64\0"+
    "\1\7\102\0\1\66\1\55\101\0\1\55\1\66\46\0"+
    "\1\10\11\0\1\10\7\0\6\10\4\0\1\10\1\67"+
    "\5\10\2\0\32\10\2\0\2\10\11\0\1\10\7\0"+
    "\6\10\4\0\7\10\2\0\13\10\1\70\1\10\1\71"+
    "\4\10\1\72\1\73\1\74\5\10\2\0\2\10\11\0"+
    "\1\10\7\0\6\10\4\0\7\10\2\0\11\10\1\75"+
    "\4\10\1\76\2\10\1\77\10\10\2\0\2\10\11\0"+
    "\1\10\7\0\6\10\4\0\7\10\2\0\1\10\1\100"+
    "\6\10\1\101\2\10\1\102\2\10\1\103\13\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\5\10\1\104\10\10\1\105\11\10\1\106\1\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\13\10\1\107\1\10\1\110\11\10\1\111\2\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\1\10\1\112\7\10\1\113\1\10\1\114\2\10\1\115"+
    "\2\10\1\116\10\10\2\0\2\10\11\0\1\10\7\0"+
    "\6\10\4\0\7\10\2\0\16\10\1\74\13\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\6\10\1\117\6\10\1\120\14\10\2\0\2\10\11\0"+
    "\1\10\7\0\6\10\4\0\7\10\2\0\16\10\1\121"+
    "\13\10\2\0\2\10\11\0\1\10\7\0\6\10\4\0"+
    "\7\10\2\0\24\10\1\122\5\10\2\0\2\10\11\0"+
    "\1\10\7\0\6\10\4\0\7\10\2\0\1\10\1\123"+
    "\3\10\1\124\10\10\1\125\5\10\1\126\5\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\17\10\1\127\1\10\1\130\10\10\2\0\2\10\11\0"+
    "\1\10\7\0\6\10\4\0\7\10\2\0\21\10\1\131"+
    "\2\10\1\132\5\10\2\0\2\10\11\0\1\10\7\0"+
    "\6\10\4\0\7\10\2\0\5\10\1\133\24\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\10\10\1\134\1\135\11\10\1\136\2\10\1\137\1\10"+
    "\1\140\1\10\2\0\2\10\11\0\1\10\7\0\6\10"+
    "\4\0\7\10\2\0\5\10\1\141\2\10\1\142\10\10"+
    "\1\143\6\10\1\144\1\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\15\10\1\145\4\10"+
    "\1\146\7\10\2\0\2\10\11\0\1\10\7\0\6\10"+
    "\4\0\7\10\2\0\11\10\1\147\4\10\1\150\13\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\3\10\1\151\4\10\1\152\21\10\2\0\2\10"+
    "\11\0\1\10\7\0\6\10\4\0\7\10\2\0\16\10"+
    "\1\153\13\10\2\0\1\10\32\0\1\61\44\0\1\55"+
    "\2\0\2\56\4\0\73\56\1\0\15\154\1\155\64\154"+
    "\2\64\1\3\2\64\1\4\74\64\1\10\11\0\1\10"+
    "\7\0\6\10\4\0\6\10\1\156\2\0\32\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\11\10\1\157\20\10\2\0\2\10\11\0\1\10\7\0"+
    "\6\10\4\0\7\10\2\0\4\10\1\130\25\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\14\10\1\117\15\10\2\0\2\10\11\0\1\10\7\0"+
    "\6\10\4\0\7\10\2\0\16\10\1\160\13\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\23\10\1\161\6\10\2\0\2\10\11\0\1\10\7\0"+
    "\6\10\4\0\7\10\2\0\23\10\1\162\6\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\16\10\1\163\13\10\2\0\2\10\11\0\1\10\7\0"+
    "\6\10\4\0\7\10\2\0\5\10\1\164\24\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\22\10\1\165\1\166\6\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\1\10\1\167\30\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\1\10\1\170\30\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\1\171\13\10\1\172"+
    "\1\173\14\10\2\0\2\10\11\0\1\10\7\0\6\10"+
    "\4\0\7\10\2\0\3\10\1\174\2\10\1\175\4\10"+
    "\1\176\16\10\2\0\2\10\11\0\1\10\7\0\6\10"+
    "\4\0\7\10\2\0\24\10\1\177\5\10\2\0\2\10"+
    "\11\0\1\10\7\0\6\10\4\0\7\10\2\0\15\10"+
    "\1\200\14\10\2\0\2\10\11\0\1\10\7\0\6\10"+
    "\4\0\7\10\2\0\22\10\1\165\7\10\2\0\2\10"+
    "\11\0\1\10\7\0\6\10\4\0\7\10\2\0\24\10"+
    "\1\72\5\10\2\0\2\10\11\0\1\10\7\0\6\10"+
    "\4\0\7\10\2\0\17\10\1\201\3\10\1\202\6\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\13\10\1\203\16\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\15\10\1\204\14\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\16\10\1\205\13\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\21\10\1\117\10\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\11\10\1\206\20\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\13\10\1\207\7\10"+
    "\1\117\6\10\2\0\2\10\11\0\1\10\7\0\6\10"+
    "\4\0\7\10\2\0\15\10\1\210\14\10\2\0\2\10"+
    "\11\0\1\10\7\0\6\10\4\0\7\10\2\0\23\10"+
    "\1\211\6\10\2\0\2\10\11\0\1\10\7\0\6\10"+
    "\4\0\7\10\2\0\14\10\1\212\15\10\2\0\2\10"+
    "\11\0\1\10\7\0\6\10\4\0\7\10\2\0\26\10"+
    "\1\117\3\10\2\0\2\10\11\0\1\10\7\0\6\10"+
    "\4\0\7\10\2\0\5\10\1\213\15\10\1\214\6\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\13\10\1\215\16\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\5\10\1\216\24\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\1\217\31\10\2\0\2\10\11\0\1\10\7\0"+
    "\6\10\4\0\7\10\2\0\11\10\1\220\4\10\1\221"+
    "\13\10\2\0\2\10\11\0\1\10\7\0\6\10\4\0"+
    "\7\10\2\0\2\10\1\222\27\10\2\0\2\10\11\0"+
    "\1\10\7\0\6\10\4\0\7\10\2\0\6\10\1\223"+
    "\1\224\1\10\1\225\6\10\1\226\2\10\1\227\6\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\16\10\1\230\13\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\7\10\1\231\21\10"+
    "\1\232\2\0\2\10\11\0\1\10\7\0\6\10\4\0"+
    "\7\10\2\0\1\10\1\233\17\10\1\234\10\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\11\10\1\235\20\10\2\0\2\10\11\0\1\10\7\0"+
    "\6\10\4\0\7\10\2\0\15\10\1\236\14\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\14\10\1\237\15\10\2\0\2\10\11\0\1\10\7\0"+
    "\6\10\4\0\7\10\2\0\11\10\1\240\7\10\1\241"+
    "\10\10\2\0\2\10\11\0\1\10\7\0\6\10\4\0"+
    "\7\10\2\0\24\10\1\242\3\10\1\117\1\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\17\10\1\243\12\10\2\0\2\10\11\0\1\10\7\0"+
    "\6\10\4\0\7\10\2\0\11\10\1\244\10\10\1\245"+
    "\7\10\2\0\2\10\11\0\1\10\7\0\6\10\4\0"+
    "\7\10\2\0\11\10\1\121\20\10\2\0\2\10\11\0"+
    "\1\10\7\0\6\10\4\0\7\10\2\0\21\10\1\246"+
    "\10\10\2\0\2\10\11\0\1\10\7\0\6\10\4\0"+
    "\7\10\2\0\11\10\1\247\1\10\1\250\16\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\10\10\1\251\21\10\2\0\2\10\11\0\1\10\7\0"+
    "\6\10\4\0\7\10\2\0\11\10\1\252\20\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\21\10\1\130\10\10\2\0\1\10\15\154\1\253\64\154"+
    "\15\0\1\155\3\0\1\3\60\0\1\10\11\0\1\10"+
    "\7\0\6\10\4\0\5\10\1\254\1\10\2\0\32\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\7\10\1\255\22\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\14\10\1\256\15\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\16\10\1\117\13\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\1\10\1\257\14\10"+
    "\1\115\13\10\2\0\2\10\11\0\1\10\7\0\6\10"+
    "\4\0\7\10\2\0\13\10\1\117\16\10\2\0\2\10"+
    "\11\0\1\10\7\0\6\10\4\0\7\10\2\0\1\10"+
    "\1\260\30\10\2\0\2\10\11\0\1\10\7\0\6\10"+
    "\4\0\7\10\2\0\5\10\1\117\24\10\2\0\2\10"+
    "\11\0\1\10\7\0\6\10\4\0\7\10\2\0\3\10"+
    "\1\261\26\10\2\0\2\10\11\0\1\10\7\0\6\10"+
    "\4\0\7\10\2\0\21\10\1\262\10\10\2\0\2\10"+
    "\11\0\1\10\7\0\6\10\4\0\7\10\2\0\22\10"+
    "\1\263\7\10\2\0\2\10\11\0\1\10\7\0\6\10"+
    "\4\0\7\10\2\0\1\10\1\264\17\10\1\265\6\10"+
    "\1\266\1\10\2\0\2\10\11\0\1\10\7\0\6\10"+
    "\4\0\7\10\2\0\17\10\1\163\12\10\2\0\2\10"+
    "\11\0\1\10\7\0\6\10\4\0\7\10\2\0\3\10"+
    "\1\267\16\10\1\270\1\271\6\10\2\0\2\10\11\0"+
    "\1\10\7\0\6\10\4\0\7\10\2\0\13\10\1\272"+
    "\16\10\2\0\2\10\11\0\1\10\7\0\6\10\4\0"+
    "\7\10\2\0\1\10\1\273\30\10\2\0\2\10\11\0"+
    "\1\10\7\0\6\10\4\0\7\10\2\0\5\10\1\274"+
    "\24\10\2\0\2\10\11\0\1\10\7\0\6\10\4\0"+
    "\7\10\2\0\2\10\1\252\27\10\2\0\2\10\11\0"+
    "\1\10\7\0\6\10\4\0\7\10\2\0\1\10\1\275"+
    "\30\10\2\0\2\10\11\0\1\10\7\0\6\10\4\0"+
    "\7\10\2\0\13\10\1\276\2\10\1\230\13\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\5\10\1\277\24\10\2\0\2\10\11\0\1\10\7\0"+
    "\6\10\4\0\7\10\2\0\22\10\1\242\7\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\1\10\1\300\30\10\2\0\2\10\11\0\1\10\7\0"+
    "\6\10\4\0\7\10\2\0\1\10\1\301\30\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\5\10\1\302\24\10\2\0\2\10\11\0\1\10\7\0"+
    "\6\10\4\0\7\10\2\0\11\10\1\303\20\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\7\10\1\117\22\10\2\0\2\10\11\0\1\10\7\0"+
    "\6\10\4\0\7\10\2\0\1\10\1\177\30\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\5\10\1\304\24\10\2\0\2\10\11\0\1\10\7\0"+
    "\6\10\4\0\7\10\2\0\27\10\1\305\2\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\13\10\1\306\16\10\2\0\2\10\11\0\1\10\7\0"+
    "\6\10\4\0\7\10\2\0\21\10\1\307\10\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\5\10\1\310\24\10\2\0\2\10\11\0\1\10\7\0"+
    "\6\10\4\0\7\10\2\0\25\10\1\311\4\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\23\10\1\312\6\10\2\0\2\10\11\0\1\10\7\0"+
    "\6\10\4\0\7\10\2\0\13\10\1\313\16\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\13\10\1\314\16\10\2\0\2\10\11\0\1\10\7\0"+
    "\6\10\4\0\7\10\2\0\11\10\1\315\20\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\15\10\1\316\14\10\2\0\2\10\11\0\1\10\7\0"+
    "\6\10\4\0\7\10\2\0\24\10\1\317\5\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\24\10\1\277\5\10\2\0\2\10\11\0\1\10\7\0"+
    "\6\10\4\0\7\10\2\0\21\10\1\301\10\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\15\10\1\320\14\10\2\0\2\10\11\0\1\10\7\0"+
    "\6\10\4\0\7\10\2\0\5\10\1\321\24\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\23\10\1\322\6\10\2\0\2\10\11\0\1\10\7\0"+
    "\6\10\4\0\7\10\2\0\11\10\1\121\12\10\1\323"+
    "\5\10\2\0\2\10\11\0\1\10\7\0\6\10\4\0"+
    "\7\10\2\0\23\10\1\166\6\10\2\0\2\10\11\0"+
    "\1\10\7\0\6\10\4\0\7\10\2\0\3\10\1\324"+
    "\26\10\2\0\2\10\11\0\1\10\7\0\6\10\4\0"+
    "\7\10\2\0\17\10\1\325\12\10\2\0\2\10\11\0"+
    "\1\10\7\0\6\10\4\0\7\10\2\0\22\10\1\117"+
    "\7\10\2\0\2\10\11\0\1\10\7\0\6\10\4\0"+
    "\7\10\2\0\5\10\1\326\10\10\1\124\13\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\5\10\1\327\24\10\2\0\2\10\11\0\1\10\7\0"+
    "\6\10\4\0\7\10\2\0\5\10\1\330\24\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\16\10\1\331\13\10\2\0\2\10\11\0\1\10\7\0"+
    "\6\10\4\0\7\10\2\0\11\10\1\332\20\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\23\10\1\333\6\10\2\0\2\10\11\0\1\10\7\0"+
    "\6\10\4\0\7\10\2\0\4\10\1\117\25\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\1\10\1\334\30\10\2\0\2\10\11\0\1\10\7\0"+
    "\6\10\4\0\7\10\2\0\1\10\1\335\30\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\13\10\1\165\16\10\2\0\1\10\15\154\1\253\3\154"+
    "\1\3\60\154\1\10\11\0\1\10\7\0\6\10\4\0"+
    "\3\10\1\336\3\10\2\0\32\10\2\0\2\10\11\0"+
    "\1\10\7\0\6\10\4\0\7\10\2\0\15\10\1\337"+
    "\14\10\2\0\2\10\11\0\1\10\7\0\6\10\4\0"+
    "\7\10\2\0\11\10\1\340\20\10\2\0\2\10\11\0"+
    "\1\10\7\0\6\10\4\0\7\10\2\0\15\10\1\247"+
    "\14\10\2\0\2\10\11\0\1\10\7\0\6\10\4\0"+
    "\7\10\2\0\12\10\1\117\17\10\2\0\2\10\11\0"+
    "\1\10\7\0\6\10\4\0\7\10\2\0\10\10\1\117"+
    "\21\10\2\0\2\10\11\0\1\10\7\0\1\10\1\341"+
    "\1\10\1\342\1\10\1\343\4\0\7\10\2\0\32\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\22\10\1\344\7\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\26\10\1\345\3\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\5\10\1\346\24\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\11\10\1\347\20\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\5\10\1\350\24\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\23\10\1\351\6\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\11\10\1\352\20\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\23\10\1\353\6\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\24\10\1\354\5\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\23\10\1\165\6\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\14\10\1\355\15\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\11\10\1\356\20\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\21\10\1\357\10\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\13\10\1\360\16\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\23\10\1\117\6\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\15\10\1\361\14\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\15\10\1\165\14\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\22\10\1\362\7\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\3\10\1\267\26\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\17\10\1\363\12\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\1\10\1\364\30\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\20\10\1\365\11\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\1\10\1\366\30\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\5\10\1\367\24\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\11\10\1\370\20\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\5\10\1\371\24\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\22\10\1\372\7\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\23\10\1\373\6\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\11\10\1\374\20\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\5\10\1\247\24\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\16\10\1\375\13\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\11\10\1\376\20\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\3\10\1\377\26\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\10\10\1\u0100\21\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\13\10\1\u0101\16\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\1\10\1\u0102\30\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\4\10\1\u0103\4\10\1\247\3\10\1\u0104\14\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\15\10\1\344\14\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\7\10\1\231\22\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\24\10\1\204\5\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\23\10\1\u0105\6\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\21\10\1\343\10\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\4\10\1\u0106\2\10\2\0\32\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\1\10\1\240\14\10\1\u0107\13\10\2\0\2\10"+
    "\11\0\1\10\7\0\6\10\4\0\7\10\2\0\3\10"+
    "\1\u0108\26\10\2\0\2\10\11\0\1\10\7\0\4\10"+
    "\1\343\1\10\4\0\7\10\2\0\32\10\2\0\2\10"+
    "\11\0\1\10\7\0\2\10\1\343\3\10\4\0\7\10"+
    "\2\0\32\10\2\0\2\10\11\0\1\10\7\0\6\10"+
    "\4\0\7\10\2\0\1\301\31\10\2\0\2\10\11\0"+
    "\1\10\7\0\6\10\4\0\7\10\2\0\1\10\1\u0109"+
    "\30\10\2\0\2\10\11\0\1\10\7\0\6\10\4\0"+
    "\7\10\2\0\23\10\1\227\6\10\2\0\2\10\11\0"+
    "\1\10\7\0\6\10\4\0\7\10\2\0\5\10\1\u010a"+
    "\24\10\2\0\2\10\11\0\1\10\7\0\6\10\4\0"+
    "\7\10\2\0\17\10\1\301\12\10\2\0\2\10\11\0"+
    "\1\10\7\0\6\10\4\0\7\10\2\0\1\u010b\4\10"+
    "\1\u010c\3\10\1\u010d\20\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\15\10\1\u010e\14\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\30\10\1\u010f\1\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\13\10\1\301\16\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\11\10\1\u0110\20\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\3\10\1\u0111\26\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\15\10\1\117\14\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\4\10\1\u0112\25\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\17\10\1\u0113\12\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\23\10\1\u0114\6\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\23\10\1\u0115\6\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\23\10\1\u0116\6\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\3\10\1\u0117\26\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\3\10\1\u0112\26\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\27\10\1\u0118\2\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\23\10\1\u0119\6\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\5\10\1\u011a\24\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\21\10\1\u011b\10\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\6\10\1\u011c\23\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\3\10\1\u011d\26\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\23\10\1\344\6\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\21\10\1\u011e\10\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\1\10\1\274\30\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\4\10\1\u011f\25\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\5\10\1\u0107\24\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\1\10\1\u0120\30\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\11\10\1\u0121\20\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\1\117\6\10\2\0\32\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\6\10\1\117\23\10\2\0\2\10\11\0\1\10\7\0"+
    "\6\10\4\0\7\10\2\0\1\u0122\31\10\2\0\2\10"+
    "\11\0\1\10\7\0\6\10\4\0\7\10\2\0\11\10"+
    "\1\301\20\10\2\0\2\10\11\0\1\10\7\0\6\10"+
    "\4\0\7\10\2\0\13\10\1\247\16\10\2\0\2\10"+
    "\11\0\1\10\7\0\6\10\4\0\7\10\2\0\3\10"+
    "\1\u0123\26\10\2\0\2\10\11\0\1\10\7\0\6\10"+
    "\4\0\7\10\2\0\25\10\1\u0124\1\10\1\u0118\2\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\15\10\1\u0109\14\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\24\10\1\165\5\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\17\10\1\165\12\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\3\10\1\u0125\26\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\11\10\1\u0126\20\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\1\10\1\u0127\30\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\21\10\1\327\10\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\16\10\1\115\13\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\5\10\1\u0112\24\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\23\10\1\u0128\6\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\17\10\1\115\12\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\5\10\1\115\24\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\21\10\1\u0129\10\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\5\10\1\240\24\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\1\u012a\31\10\2\0\2\10\11\0\1\10\7\0"+
    "\6\10\4\0\7\10\2\0\16\10\1\u012b\13\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\1\u012c\31\10\2\0\2\10\11\0\1\10\7\0\6\10"+
    "\4\0\7\10\2\0\14\10\1\165\15\10\2\0\2\10"+
    "\11\0\1\10\7\0\6\10\4\0\7\10\2\0\13\10"+
    "\1\u012d\16\10\2\0\2\10\11\0\1\10\7\0\6\10"+
    "\4\0\7\10\2\0\3\10\1\u012e\11\10\1\u012f\14\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\1\10\1\u0130\30\10\2\0\2\10\11\0\1\10"+
    "\7\0\6\10\4\0\7\10\2\0\1\10\1\163\30\10"+
    "\2\0\2\10\11\0\1\10\7\0\6\10\4\0\7\10"+
    "\2\0\1\u010b\31\10\2\0\2\10\11\0\1\10\7\0"+
    "\6\10\4\0\7\10\2\0\23\10\1\360\6\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\3\10\1\165\26\10\2\0\2\10\11\0\1\10\7\0"+
    "\6\10\4\0\7\10\2\0\5\10\1\361\24\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\17\10\1\u0131\12\10\2\0\2\10\11\0\1\10\7\0"+
    "\6\10\4\0\7\10\2\0\1\10\1\u0132\1\10\1\u0123"+
    "\26\10\2\0\2\10\11\0\1\10\7\0\6\10\4\0"+
    "\7\10\2\0\15\10\1\u0133\14\10\2\0\2\10\11\0"+
    "\1\10\7\0\6\10\4\0\7\10\2\0\13\10\1\u0134"+
    "\16\10\2\0\2\10\11\0\1\10\7\0\6\10\4\0"+
    "\7\10\2\0\5\10\1\u0135\24\10\2\0\2\10\11\0"+
    "\1\10\7\0\6\10\4\0\7\10\2\0\1\10\1\u0136"+
    "\14\10\1\u0137\13\10\2\0\2\10\11\0\1\10\7\0"+
    "\6\10\4\0\7\10\2\0\16\10\1\u0138\13\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\22\10\1\301\7\10\2\0\2\10\11\0\1\10\7\0"+
    "\6\10\4\0\7\10\2\0\21\10\1\u0139\10\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\22\10\1\u013a\7\10\2\0\2\10\11\0\1\10\7\0"+
    "\6\10\4\0\7\10\2\0\11\10\1\u013b\20\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\16\10\1\u013c\13\10\2\0\2\10\11\0\1\10\7\0"+
    "\6\10\4\0\7\10\2\0\15\10\1\u013d\14\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\14\10\1\u013e\15\10\2\0\2\10\11\0\1\10\7\0"+
    "\6\10\4\0\7\10\2\0\5\10\1\213\24\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\5\10\1\u013f\24\10\2\0\2\10\11\0\1\10\7\0"+
    "\6\10\4\0\7\10\2\0\22\10\1\u0140\7\10\2\0"+
    "\2\10\11\0\1\10\7\0\6\10\4\0\7\10\2\0"+
    "\31\10\1\320\2\0\2\10\11\0\1\10\7\0\6\10"+
    "\4\0\7\10\2\0\3\10\1\u0124\26\10\2\0\2\10"+
    "\11\0\1\10\7\0\6\10\4\0\7\10\2\0\3\10"+
    "\1\u0141\26\10\2\0\2\10\11\0\1\10\7\0\6\10"+
    "\4\0\7\10\2\0\14\10\1\u0109\15\10\2\0\2\10"+
    "\11\0\1\10\7\0\6\10\4\0\7\10\2\0\23\10"+
    "\1\u0125\6\10\2\0\2\10\11\0\1\10\7\0\6\10"+
    "\4\0\7\10\2\0\5\10\1\230\24\10\2\0\2\10"+
    "\11\0\1\10\7\0\6\10\4\0\7\10\2\0\5\10"+
    "\1\163\24\10\2\0\1\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19734];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\3\1\1\11\44\1\2\11\1\0\1\11"+
    "\1\0\2\11\1\0\1\1\1\0\66\1\2\0\75\1"+
    "\1\0\226\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[321];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  StringBuilder string = new StringBuilder();
  
  private Token symbol(TokenKinds type) {
    return new Token(type, yyline+1, yycolumn+1);
  }

  private Token symbol(TokenKinds type, String value) {
    return new Token(type, yyline+1, yycolumn+1, value);
  }
  




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public jflexScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return symbol(TokenKinds.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);
            }
            // fall through
          case 20: break;
          case 2:
            { /* Ignore: don't return anything. */
            }
            // fall through
          case 21: break;
          case 3:
            { return symbol(TokenKinds.UNARY_OPERATOR,yytext() );
            }
            // fall through
          case 22: break;
          case 4:
            { return symbol(TokenKinds.SEPARATOR,yytext() );
            }
            // fall through
          case 23: break;
          case 5:
            { return symbol(TokenKinds.IDENTIFIER, yytext());
            }
            // fall through
          case 24: break;
          case 6:
            { return symbol(TokenKinds.ARITHMETIC_OPERATOR,yytext() );
            }
            // fall through
          case 25: break;
          case 7:
            { return symbol(TokenKinds.OVERLOADED_LEXEME,yytext() );
            }
            // fall through
          case 26: break;
          case 8:
            { return symbol(TokenKinds.INTEGER_LITERAL, yytext());
            }
            // fall through
          case 27: break;
          case 9:
            { return symbol(TokenKinds.RL_OPERATOR,yytext() );
            }
            // fall through
          case 28: break;
          case 10:
            { return symbol(TokenKinds.ASSIGNMENT,yytext() );
            }
            // fall through
          case 29: break;
          case 11:
            { return symbol(TokenKinds.STRING_LITERAL,yytext());
            }
            // fall through
          case 30: break;
          case 12:
            { return symbol(TokenKinds.PM_OPERATOR,yytext() );
            }
            // fall through
          case 31: break;
          case 13:
            { return symbol(TokenKinds.SHIFT_OPERATOR,yytext() );
            }
            // fall through
          case 32: break;
          case 14:
            { return symbol(TokenKinds.KEYWORD,yytext() );
            }
            // fall through
          case 33: break;
          case 15:
            { return symbol(TokenKinds.LITERAL,yytext() );
            }
            // fall through
          case 34: break;
          case 16:
            { return symbol(TokenKinds.CLASS_DEF,yytext() );
            }
            // fall through
          case 35: break;
          case 17:
            { return symbol(TokenKinds.QUALIFIER,yytext() );
            }
            // fall through
          case 36: break;
          case 18:
            { return symbol(TokenKinds.VIRT_SPECIFIER,yytext() );
            }
            // fall through
          case 37: break;
          case 19:
            { return symbol(TokenKinds.ACCESS_MODIFIER,yytext() );
            }
            // fall through
          case 38: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
