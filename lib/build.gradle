/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8/userguide/building_java_projects.html
 */




buildscript {
  repositories { mavenCentral() }
  dependencies { classpath 'org.ajoberstar:gradle-git:0.2.3'
  				classpath "com.github.fracpete:rsync4j-all:3.1.2-15" }
}
plugins {
   id 'java'
   id "org.xbib.gradle.plugin.git" version "2.0.0"
   id "org.jbake.site" version "5.5.0"
   id 'java-gradle-plugin'
    id 'project-report'
	id "org.xbib.gradle.plugin.jflex" version "1.5.0"
	id 'jacoco'

	id 'pmd'
    id 'edu.odu.cs.report_accumulator' version '1.4' 
    
   
}
import org.ajoberstar.gradle.git.tasks.*;
import com.github.fracpete.rsync4j.RSync;  
import com.github.fracpete.processoutput4j.output.ConsoleOutputProcessOutput;

group = 'edu.odu.cs.cs350'

version = '1.0'
java {
    withJavadocJar()
    withSourcesJar()
    sourceCompatibility = JavaVersion.toVersion(11)
    targetCompatibility = JavaVersion.toVersion(11)
}
configurations{
	jar.archiveName='DupDetector.jar'
}



 javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
    source=sourceSets.main.allJava
   
}


repositories {
    jcenter()
    mavenLocal()
    maven{
     url "https://plugins.gradle.org/m2/"
    }
    
  
   
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0' 
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
    compile "org.ini4j:ini4j:0.5.4"
}

test { 
    ignoreFailures = true
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport{
	dependsOn test
	
	reports{
		xml.required= false
		csv.required=false
		html.outputLocation= layout.buildDirectory.dir('jacocoHtml')
	}
}

reportStats {
    reportsURL = 'https://allenhord.github.io/Duplicate-Code-Detector-Team-W7-2/'
    htmlSourceDir = file('build/reports')  // default value
    reportsDir = file('build/reports') // default value
  //  buildID = "12345"                  // defaults to current date, but can be any run identifier
}
pmdMain{
	ignoreFailures=true
	consoleOutput=false
}

pmdTest.enabled=false
test.ignoreFailures=true

task reports2 (dependsOn: ['javadoc', 'test']) {
    description 'Generate all reports for this project'
}

task copyWebPages (type: Copy) {
    from 'src/main/html'
    into 'build/reports'
}
task copyJacocoTest(type: Copy){
	from 'build/jacocoHtml'
	into 'build/reports/jacoco'
	dependsOn 'jacocoTestReport'
}

task copyDocs (type: Copy) {
    from 'build/docs'
    into 'build/reports/docs'
    dependsOn 'javadoc'
}

task reports (dependsOn: [ 'javadoc', 'check',
    'copyWebPages', 'copyDocs','copyJacocoTest']) {
    description 'Generate all reports for this project'
    group 'Reporting'
   }

task clonePages() {
    doLast {
        mkdir 'build/gh-pages'
        def thisRepo = rootProject.projectDir.toString()
        def pagesDir = "$buildDir/gh-pages"
        project.delete {
            delete pagesDir
        }
        def grgit = git.clone {
            dir = pagesDir
            uri = 'file:' + thisRepo
            remote = 'gh-pages'
            bare = false
            refToCheckout = 'gh-pages'
        }
        grgit.checkout {branch ='gh-pages'}
        //
     
        
    }
}

task copyReports (type: Copy, dependsOn: ['reports', 'clonePages']) {
    from "$buildDir/reports"
    into "$buildDir/gh-pages/reports"
}

task deployReports (dependsOn: ['copyReports','reportStats']) {

   
    doLast {
 /*
        def pagesDir = "$buildDir/gh-pages"
        def grgit = git.open {
            dir = pagesDir + "/.git"
        }
        grgit.add (update: false, patterns: ['reports/'])
        grgit.add (update: true, patterns: ['reports/'])
        
     */
     	
			def pagesDir = "$buildDir/gh-pages"
        def grgit = git.open {
            dir = pagesDir //+ "/.git" 
            }    
        exec{
        	workingDir "build/gh-pages"
        	commandLine "git","add","reports"
        }
        
        
        grgit.commit {
            message = "Updating web pages 3"
        }
        
        
       
	 exec{
        	workingDir "build/gh-pages/"
        	commandLine "git","status"
        }
         exec {
           workingDir "$buildDir/gh-pages/"
           //commandLine "git","add","-all"
          // commandLine "git","commit", "-a", "-m", "\"deploying reports\""
           commandLine "git","push","--all"
         }
         
          exec{
        	
        	commandLine "git","push","--all"
        }
         
         /*
        grgit.push{
        	//dir = pagesDir
           // uri = 'file:' + thisRepo
        	//remote='gh-pages'
        	all=true
        }
        */
        //testing build
        }
    
}

